#!/usr/bin/env node
const config = require('../config/config')
const port = normalizePort(process.env.PORT || config.port)
const http = require('http')
const MongoClient = require('mongodb').MongoClient
let app = require('../app')
const fs = require('fs')
const dbHepler = require('../config/mongodb')
app.set('port', port)
let server = http.createServer(app)

MongoClient.connect(config.MONGODB_ConnectionString, { poolSize: config.MONGODB_POOL_SIZE, useUnifiedTopology: true}, (err, client) => {
  if (err) {
    console.error('Failed to connect to the database. ' + err.stack)
    process.exit()
  }
  else {
    const dbName = config.mongodb_name
    const db = client.db(dbName)
    // app.locals.mongodb = db
    dbHepler.setClient(db)
    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
  }
})

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  console.log('Listening on ' + bind)
}

function normalizePort(val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) {
    return val
  }
  if (port >= 0) {
    return port
  }
  return false
}
